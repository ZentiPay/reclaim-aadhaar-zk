name: Deploy to Google Cloud VM

on:
  push:
    branches: [ master ]

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  VM_ZONE: ${{ secrets.VM_ZONE }}
  VM_NAME: ${{ secrets.VM_NAME }}
  VM_USER: ${{ secrets.VM_USER }}
  APP_NAME: ${{ secrets.APP_NAME }}

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.PROJECT_ID }}

      - name: Deploy to VM
        run: |
          # Create deployment script
          cat > deploy.sh << 'EOF'
          #!/bin/bash
          set -e

          echo "Starting deployment..."

          # Navigate to app directory
          cd /home/${{ env.VM_USER }}/${{ env.APP_NAME }}

          # Pulling latest code
          echo "Pulling latest code..."
          git pull origin master

          # Stop existing server
          echo "Stopping existing container..."
          echo "Checking for running containers on port 8080..."
          sudo docker ps --filter "publish=8080" --format "table {{.ID}}\t{{.Names}}\t{{.Ports}}"
          
          # Stop container by name
          sudo docker stop ${{ env.APP_NAME }} 2>/dev/null || echo "Container ${{ env.APP_NAME }} not running"
          sudo docker rm ${{ env.APP_NAME }} 2>/dev/null || echo "Container ${{ env.APP_NAME }} not found"
          
          # Also stop any container using port 8080 (backup cleanup)
          CONTAINERS_ON_PORT=$(sudo docker ps --filter "publish=8080" -q)
          if [ ! -z "$CONTAINERS_ON_PORT" ]; then
            echo "Found containers still using port 8080, stopping them..."
            sudo docker stop $CONTAINERS_ON_PORT
            sudo docker rm $CONTAINERS_ON_PORT
          fi
          
          # Wait a moment for port to be released
          sleep 2

          # Build new image
          echo "Building Docker image..."
          sudo docker build -t ${{ env.APP_NAME }}:latest .

          # Run new container
          echo "Starting new container..."
          sudo docker run -d \
            --name ${{ env.APP_NAME }} \
            --restart unless-stopped \
            -p 8080:8080 \
            -e APP_ID="${{ secrets.APP_ID }}" \
            -e APP_SECRET="${{ secrets.APP_SECRET }}" \
            -e PORT="${{ secrets.PORT }}" \
            -e SETU_URL="${{ secrets.SETU_URL }}" \
            ${{ env.APP_NAME }}:latest

          # Clean up old images
          echo "Cleaning up..."
          sudo docker image prune -f

          echo "Deployment completed successfully"
          EOF

          # Copy and execute deployment script
          gcloud compute scp deploy.sh ${{ env.VM_USER }}@${{ env.VM_NAME }}:~/deploy.sh --zone=${{ env.VM_ZONE }}
          gcloud compute ssh ${{ env.VM_USER }}@${{ env.VM_NAME }} --zone=${{ env.VM_ZONE }} --command="chmod +x ~/deploy.sh && ~/deploy.sh"